탐색 : 많은 양의 데이터 중 원하는 데이터를 찾는 과정
자료구조 : 데이터를 표현, 관리, 처리하기 위한 구조
- 스택 : FILO(선입후출), LIFO(후입선출) 구조
    - stack = []
    - stack.append(1) # 가장 뒤쪽에 1 삽입
    - stack.pop() # 가장 뒤쪽의 데이터 하나 꺼내서 삭제
    - print(stack) # 최하단 원소부터 출력
    - print(stack[::-1]) # 최상단 원소부터 출력
- 큐 : FIFO(선입선출) 구조
    - from collections import deque # 큐 선언 위해 라이브러리 사용 (리스트, 큐보다 효율적이고 빠름)
    - queue = deque() # 큐 선언 
    - queue.append() # index 0부터 순서대로 append
    - queue.popleft() # 가장 왼쪽(작은 index)에서 제거
    - queue.popright() # 가장 오른쪽(큰 index)에서 제거
    - print(queue) # 먼저 들어온 순서대로 출력 
    - queue.reverse() # 역순으로 바꾸기
    - print(queue) # 나중에 들어온 순서대로 출력
    - list(queue) # deque 객체를 리스트로 자료형 변환 가능

- 오버플로우 : 특정 자료구조가 수용 가능한 데이터 크기가 이미 가득찬 상태에서 push할때
- 언더플로우 : 특정 자료구조에 데이터가 없는 상태에서 pop 연산 수행할때