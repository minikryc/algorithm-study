# 그래프 : node(vertex), edge로 구성
# 그래프 탐색 : 하나의 노드를 시작으로 다수의 노드를 방문하는 과정
#   - 두 노드가 edge로 연결되어 있다 = 두 노드는 인접(adjacent)한다.
#   - n차 배열도 그래프로 생각하고 풀면 편하다.

# 그래프 표현 방식 : 
#   1. Adjacency Matrix : 리스트로 인접행렬 구현
#       - 모든 관계를 저장해 노드 개수가 많을수록 메모리가 불필요하게 낭비

INF = 999999999 # 무한 선언 = edge로 연결 안된 노드 사이를 표현
graph = [ 
    [0, 7, 5],
    [7, 0, INF],
    [5, INF, 0]
]
print(graph) # [[0, 7, 5], [7, 0, INF], [5, INF, 0]]

#   2. Adjacency List : 모든 노드에 연결된 노드에 대한 정보를 차례대로 연결하여 저장
#       - 연결된 정보만 저장해 메모리 효율적으로 사용
#       - 인접 행렬 방식에 비해 연결 데이터 하나씩 확인해야 해서 연결된 두 노드에 대한 정보 얻는 속도가 느림

graph2 = [[] for _ in range(3)]
graph2[0].append((1, 7)) # 노드0에 연결된 노드 정보 저장 (노드, 거리)
graph2[0].append((2, 5))
graph2[1].append((0, 7)) # 노드1에 연결된 노드 정보 저장 (노드, 거리)
graph2[2].append((0, 5)) # 노드2에 연결된 노드 정보 저장 (노드, 거리)
print(graph2) # [[(1, 7), (2, 5)], [(0, 7)], [(0, 5)]]

# --------------------------------------------------------------------------------------------------------------

# DFS : Depth First Search. 그래프의 깊은곳부터 우선 탐색
#   - 스택 자료구조 이용
#   - 스택을 이용하는 알고리즘이라, 실제 구현은 재귀함수로 했을때 매우 간단
#   - 데이터개수 N개만큼, O(N) 시간 소요
#   - 동작 과정 : 
#       1. 탐색 시작 노드를 스택에 삽입하고 방문처리
#       2. 스택의 최상단 노드에 방문하지 않은 인접 노드가 있으면(여러개면 낮은 번호부터 처리), 그 인접 노드를 스택에 넣고 방문처리.
#          방문 안한 인접 노드가 없으면 스택에서 최상단 노드를 꺼낸다. (그 전 노드로 돌아가는 것)
#       3. 2번 과정을 더이상 수행할수 없을때까지 반복
def dfs(graph, v, visited): # 스택, recursive 사용 구현
    # 현재 노드 방문처리
    visited[v] = True 
    print(v, end=' ')

    # 현재 노드와 연결된 다른 노드를 재귀적으로 방문
    for i in graph[v]:
        if not visited[i]:
            dfs(graph, i, visited)
# 각 노드가 연결된 정보를 2차원 리스트 자료형으로 표현 
graph3 = [
[],         # 0번째 노드는 존재 X
[2, 3, 8],  # 1번째 노드가 연결된 노드는 2, 3, 8
[1, 7],     # 2번째 노드가 연결된 노드는 1, 7
[1, 4, 5],  # 3번째 노드가 연결된 노드는 1, 4, 5
[3, 5],     # 4번째 노드가 연결된 노드는 3, 5
[3, 4],     # 5번째 노드가 연결된 노드는 3, 4
[7],        # 6번째 노드가 연결된 노드는 7
[2, 6, 8],  # 7번째 노드가 연결된 노드는 2, 6, 8
[1, 7]      # 8번째 노드가 연결된 노드는 1, 7
]
# 방문한 노드 정보 1차원 리스트 자료형으로 표현
visited = [False] * 9 # 0번째 노드는 안씀
# 정의된 DFS 함수 호출
dfs(graph3, 1, visited) # 노드의 탐색 순서 (스택에 들어간 순서) 출력 : 1 2 7 6 8 3 4 5

# --------------------------------------------------------------------------------------------------------------

# BFS : Breadth Frist Search. 가까운 노드부터 (너비) 우선 탐색
#   - 큐 자료구조 이용
#   - 동작 과정 : 
#       1. 탐색 시작 노드를 큐에 삽입하고 방문 처리
#       2. 큐에서 노드를 꺼내 해당 노드의 인접 노드 중 방문 안한 노드를 모두 큐에 삽입, 방문 처리
#       3. 2번 과정을 더이상 수행할수 없을때까지 반복
#   - 데이터개수 N개만큼, O(N) 시간 소요 (실제 수행 시간은 DFS보다 좀더 빠름)
from collections import deque

def bfs(graph, start, visited): # queue 사용 구현
    queue = deque([start]) # start=1이라면, 1을 초기로 가지는 deque 객체를 생성하는 것
    # 현재 노드 방문 처리
    visited[start] = True
    # 큐가 빌 때까지 반복
    while queue:
        # 큐에서 원소 하나 뽑아 출력
        v = queue.popleft()
        print(v, end=' ')
        # 해당 원소와 연결된, 아직 방문하지 않은 원소들을 큐에 삽입
        for i in graph[v]:
            if not visited[i]:
                queue.append(i)
                visited[i] = True

graph4 = [
    [],
    [2, 3, 8],
    [1, 7],
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]
visited2 = [False] * 9
bfs(graph4, 1, visited2) # 노드의 탐색 순서 (스택에 들어간 순서) 출력 : 1 2 3 8 7 4 5 6